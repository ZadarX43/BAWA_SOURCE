# -*- coding: utf-8 -*-
"""Copy of Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X_MKkdILt3D15f46wLxddAd-SSILl73J
"""

import pandas as pd

# Load the datasets
cleaned_teams_path = 'cleaned_teams_head_to_head.csv'
cleaned_matches_path = 'cleaned_matches.csv'

# Read the data into pandas dataframes
cleaned_teams_data = pd.read_csv(cleaned_teams_path)
cleaned_matches_data = pd.read_csv(cleaned_matches_path)

# Display the first few rows to check the features
print(cleaned_teams_data.head())
print(cleaned_matches_data.head())

# Example code to check for missing values
print(cleaned_teams_data.isnull().sum())
print(cleaned_matches_data.isnull().sum())

# Fill missing values or drop rows/columns
# cleaned_teams_data.fillna(0, inplace=True)  # Example to fill missing values with 0
# cleaned_matches_data.dropna(inplace=True)   # Example to drop rows with missing values

import pandas as pd

# Replace 'path_to_your_file.csv' with the actual file path
cleaned_matches_data_df = pd.read_csv('/content/cleaned_teams_head_to_head.csv')

# Aggregating player stats by team and season
aggregation_methods = {
    'goals_per_90_overall': 'mean',
    'assists_per_90_overall': 'mean',
    'average_rating_overall': 'mean',
    'clean_sheets_overall': 'sum',
    'goals_overall': 'sum',
    'assists_overall': 'sum',
    'appearances_overall': 'sum',
    'minutes_played_overall': 'sum',
    'yellow_cards_overall': 'sum',
    'red_cards_overall': 'sum',
    'tackles_per_90_overall': 'sum',
    'xg_per_90_overall': 'sum',
    'xa_per_90_overall': 'sum',
    'npxg_per_90_overall': 'sum',
    'interceptions_per_90_overall': 'sum',
    'distance_travelled_per_90_overall': 'sum',
    'aerial_duels_won_per_90_overall': 'sum',
    'shots_on_target_per_90_overall': 'sum',
    'shot_conversion_rate_overall': 'sum',
    'key_passes_per_90_overall': 'sum',
    'through_passes_per_90_overall': 'sum',
    'chances_created_per_90_overall': 'sum',
    'dribbles_per_90_overall': 'sum',
    'dribbles_successful_percentage_overall': 'sum',
    'passes_per_90_overall': 'sum',
    'pass_completion_rate_overall': 'sum',
    'full_name': 'first',
    'age': 'first',
    'position': 'first',
    'league': 'first'
    # Note: Removed 'Current Club' and 'season' as they are already included as part of the groupby
}

aggregated_player_stats = extracted_features_df.groupby(['Current Club', 'season']).agg(aggregation_methods).reset_index()

# Assuming 'team_name' in cleaned_teams_data matches 'Current Club' in aggregated_player_stats
merged_team_player_stats = pd.merge(
    cleaned_teams_data,
    aggregated_player_stats,
    left_on=['team_name', 'season'],
    right_on=['Current Club', 'season'],
    how='left'
)

# Assuming 'home_team_name' and 'away_team_name' in cleaned_matches_data_df
final_dataset = pd.merge(
    cleaned_matches_data_df,
    merged_team_player_stats,
    left_on=['common_name', 'season'],
    right_on=['team_name', 'season'],
    how='left'
)

print(cleaned_matches_data_df.columns)

# Specify the file path and name for your downloaded file
download_path = '/content/merged_team_player_stats.csv'

# Save the DataFrame to a CSV file
merged_team_player_stats.to_csv(download_path, index=False)

# Code to download the file to your local system
from google.colab import files
files.download(download_path)

cleaned_matches_data_df = pd.read_csv('/content/cleaned_matches (2).csv')
print(cleaned_matches_data_df.columns)

# Replace 'path_to_your_file' with the actual path of your CSV file
cleaned_matches_data_df = pd.read_csv('/content/cleaned_matches (2).csv')

# Display the first few rows of the DataFrame
print(cleaned_matches_data_df.head())

# Check column names
print(cleaned_matches_data_df.columns)

'cleaned_matches_data_df' in locals() or 'cleaned_matches_data_df' in globals()

print(cleaned_matches_data_df.columns)
print(merged_team_player_stats.columns)

cleaned_matches_data_df['season'] = pd.to_datetime(cleaned_matches_data_df['date_GMT']).dt.year

# Convert 'season' to string in both DataFrames
cleaned_matches_data_df['season'] = cleaned_matches_data_df['season'].astype(str)
merged_team_player_stats['season'] = merged_team_player_stats['season'].astype(str)

# Merge considering 'common_name' as the home team
final_dataset_home = pd.merge(
    cleaned_matches_data_df,
    merged_team_player_stats,
    left_on=['home_team_name', 'season'],
    right_on=['common_name', 'season'],
    how='left'
)

# Merge considering 'common_name' as the away team
final_dataset_away = pd.merge(
    cleaned_matches_data_df,
    merged_team_player_stats,
    left_on=['away_team_name', 'season'],
    right_on=['common_name', 'season'],
    how='left'
)

# Validate the merged data
print(final_dataset_home.head())
print(final_dataset_away.head())

# Example: Check unique team names in both DataFrames
print(cleaned_matches_data_df['home_team_name'].unique())
print(merged_team_player_stats['common_name'].unique())

# Extracting team names from the match data
team_names_match_data = set(cleaned_matches_data_df['home_team_name'].tolist() + cleaned_matches_data_df['away_team_name'].tolist())

# Extracting team names from the player stats data
team_names_player_stats = set(merged_team_player_stats['common_name'].tolist())

# Now proceed to compare the lists and find discrepancies
non_matching_names_match_data = team_names_match_data - team_names_player_stats
non_matching_names_player_stats = team_names_player_stats - team_names_match_data

# Print non-matching names for inspection
print("Non-matching in Match Data:", non_matching_names_match_data)
print("Non-matching in Player Stats:", non_matching_names_player_stats)

english_leagues = ['Premier League', 'Championship', 'FA Cup', 'League One', 'League Two']
filtered_df = original_df[original_df['league'].isin(english_leagues)]

import pandas as pd

# List all the variables currently in the environment
all_vars = globals().copy()
all_vars.update(locals())

# Filter and print only those variables which are pandas DataFrames
for var_name, var_val in all_vars.items():
    if isinstance(var_val, pd.DataFrame):
        print(f"{var_name}: {type(var_val)} with shape {var_val.shape}")

# Replace 'df_to_use' with the actual DataFrame you want to filter (e.g., extracted_features_df or combined_player_stats)
# Replace 'league_column' with the actual column name that contains league information in your DataFrame

df_to_use = extracted_features_df # or combined_player_stats
english_leagues = ['Premier League', 'Championship', 'FA Cup', 'EFL League One', 'EFL League Two']
filtered_df = df_to_use[df_to_use['league'].isin(english_leagues)]

# Display the first few rows to verify
print(filtered_df.head())



# This will display the first few rows of the DataFrame
cleaned_matches_data_df.head()

# Merge considering 'common_name' as the home team
final_dataset_home = pd.merge(
    cleaned_matches_data_df,
    merged_team_player_stats,
    left_on=['home_team_name', 'season'],
    right_on=['common_name', 'season'],
    how='left'
)

# Merge considering 'common_name' as the away team
final_dataset_away = pd.merge(
    cleaned_matches_data_df,
    merged_team_player_stats,
    left_on=['away_team_name', 'season'],
    right_on=['common_name', 'season'],
    how='left'
)

# This will display the column names and data types
cleaned_matches_data_df.info()

# This will display the column names in the DataFrame
cleaned_matches_data_df.columns

# Commented out IPython magic to ensure Python compatibility.
# List all variables in the current session
# %who

import pandas as pd

# List all pandas DataFrames
for var in dir():
    if isinstance(eval(var), pd.DataFrame):
        print(var)

print(cleaned_matches_data_df.head())
print(cleaned_teams_data.head())
print(extracted_features_df.head())
print(combined_player_stats.head())
print(seasonal_player_stats.head())

# Example code to convert data types
# cleaned_teams_data['some_column'] = cleaned_teams_data['some_column'].astype(float)
# cleaned_matches_data['another_column'] = cleaned_matches_data['another_column'].astype(int)

import pandas as pd

# Check for missing values
missing_values = extracted_features_df.isnull().sum()
print(missing_values)

file_paths = [
    '/content/spain-la-liga-players-2023-to-2024-stats.xlsx',
    '/content/portugal-liga-nos-players-2023-to-2024-stats.xlsx',
    '/content/italy-serie-a-players-2023-to-2024-stats.xlsx',
    '/content/germany-bundesliga-players-2023-to-2024-stats.xlsx',
    '/content/france-ligue-1-players-2023-to-2024-stats.xlsx',
    '/content/europe-uefa-europa-league-players-2023-to-2024-stats.xlsx',
    '/content/europe-uefa-champions-league-players-2023-to-2024-stats.xlsx',
    '/content/england-premier-league-players-2023-to-2024-stats.xlsx',
    '/content/england-fa-cup-players-2023-to-2024-stats.xlsx',
    '/content/england-efl-league-two-players-2023-to-2024-stats.xlsx',
    '/content/england-efl-league-one-players-2023-to-2024-stats.xlsx',
    '/content/england-championship-players-2023-to-2024-stats.xlsx',

    # Add paths for all your files
]

!pip install openpyxl
import pandas as pd

file_paths = [
    '/content/spain-la-liga-players-2023-to-2024-stats.xlsx',
    '/content/portugal-liga-nos-players-2023-to-2024-stats.xlsx',
    '/content/italy-serie-a-players-2023-to-2024-stats.xlsx',
    '/content/germany-bundesliga-players-2023-to-2024-stats.xlsx',
    '/content/france-ligue-1-players-2023-to-2024-stats.xlsx',
    '/content/europe-uefa-europa-league-players-2023-to-2024-stats.xlsx',
    '/content/europe-uefa-champions-league-players-2023-to-2024-stats.xlsx',
    '/content/england-premier-league-players-2023-to-2024-stats.xlsx',
    '/content/england-fa-cup-players-2023-to-2024-stats.xlsx',
    '/content/england-efl-league-two-players-2023-to-2024-stats.xlsx',
    '/content/england-efl-league-one-players-2023-to-2024-stats.xlsx',
    '/content/england-championship-players-2023-to-2024-stats.xlsx',

    # Add paths for all your files
]

dfs = []  # List to store individual DataFrames

for file in file_paths:
    df = pd.read_excel(file)
    dfs.append(df)

combined_player_stats = pd.concat(dfs, ignore_index=True)

print(combined_player_stats.head())

# Assuming you have a DataFrame named 'combined_player_stats' containing all the player statistics
# If you haven't already loaded the data into a DataFrame, do it before running the following code

# List of desired features
features = [
    "full_name", "age", "position", "Current Club", "league", "season",
    "minutes_played_overall", "appearances_overall", "yellow_cards_overall", "red_cards_overall",
    "goals_per_90_overall", "assists_per_90_overall", "xg_per_90_overall", "xa_per_90_overall",
    "npxg_per_90_overall", "clean_sheets_overall", "tackles_per_90_overall", "interceptions_per_90_overall",
    "distance_travelled_per_90_overall", "aerial_duels_won_per_90_overall", "goals_overall",
    "assists_overall", "shots_on_target_per_90_overall", "shot_conversion_rate_overall",
    "key_passes_per_90_overall", "through_passes_per_90_overall", "chances_created_per_90_overall",
    "dribbles_per_90_overall", "dribbles_successful_percentage_overall", "passes_per_90_overall",
    "pass_completion_rate_overall", "average_rating_overall"
]

# Extracting the features
extracted_features_df = combined_player_stats[features]

# Displaying the first few rows of the extracted features DataFrame
print(extracted_features_df.head())

# Check for missing values
missing_values = extracted_features_df.isnull().sum()
print(missing_values)

# Define a threshold for the minimum number of non-missing values required to keep a row
threshold = len(extracted_features_df.columns) - 5  # For example, allow up to 5 missing values

# Filter out rows with missing values above the threshold
extracted_features_df = extracted_features_df.dropna(thresh=threshold)



# Check for missing values after filtering
print(extracted_features_df.isnull().sum())

# Check the size of the DataFrame after filtering
print(extracted_features_df.shape)

from google.colab import files

# Save your cleaned DataFrame to a CSV file
csv_file_path = '/content/cleaned_player_stats.csv'
extracted_features_df.to_csv(csv_file_path, index=False)

# Download the file to your local system
files.download(csv_file_path)

# Assuming 'extracted_features_df' has a 'Current Club' column that matches the team name in your match data

# If necessary, standardize team names across datasets
extracted_features_df['Current Club'] = extracted_features_df['Current Club'].str.strip().str.lower()
match_stats_df['home_team_name'] = match_stats_df['home_team_name'].str.strip().str.lower()
match_stats_df['away_team_name'] = match_stats_df['away_team_name'].str.strip().str.lower()

!pip install --upgrade pandas openpyxl









